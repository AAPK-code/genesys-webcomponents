/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  IListItem,
} from './components/global/genesys-list/genesys-list-interfaces';


export namespace Components {

  interface GenesysActionButton {
    /**
    * The component accent (secondary or primary).
    */
    'accent': string;
    /**
    * It is used to open or not the list.
    */
    'isOpen': boolean;
    /**
    * The list. each item should contain a text and a type  an item could have the poperty isDisabled
    */
    'items': IListItem[];
    /**
    * The component text.
    */
    'text': string;
  }
  interface GenesysActionButtonAttributes extends StencilHTMLAttributes {
    /**
    * The component accent (secondary or primary).
    */
    'accent'?: string;
    /**
    * It is used to open or not the list.
    */
    'isOpen'?: boolean;
    /**
    * The list. each item should contain a text and a type  an item could have the poperty isDisabled
    */
    'items'?: IListItem[];
    /**
    * Triggered when the action button is clicked
    */
    'onActionClick'?: (event: CustomEvent) => void;
    /**
    * Triggered when the menu is close
    */
    'onClose'?: (event: CustomEvent) => void;
    /**
    * Triggered when the menu is open
    */
    'onOpen'?: (event: CustomEvent) => void;
    /**
    * The component text.
    */
    'text'?: string;
  }

  interface GenesysButton {
    /**
    * The component accent (secondary or primary).
    */
    'accent': string;
    /**
    * Indicate if the button is disabled or not
    */
    'disabled': boolean;
    'focus': () => void;
    /**
    * The component left icon.
    */
    'leftIcon': string;
    /**
    * The component right icon.
    */
    'rightIcon': string;
    /**
    * The component text.
    */
    'text': string;
  }
  interface GenesysButtonAttributes extends StencilHTMLAttributes {
    /**
    * The component accent (secondary or primary).
    */
    'accent'?: string;
    /**
    * Indicate if the button is disabled or not
    */
    'disabled'?: boolean;
    /**
    * The component left icon.
    */
    'leftIcon'?: string;
    /**
    * The component right icon.
    */
    'rightIcon'?: string;
    /**
    * The component text.
    */
    'text'?: string;
  }

  interface GenesysList {
    'focus': () => void;
    /**
    * The list. each item should contain a text and a type  an item could have the poperty isDisabled
    */
    'items': IListItem[];
  }
  interface GenesysListAttributes extends StencilHTMLAttributes {
    /**
    * The list. each item should contain a text and a type  an item could have the poperty isDisabled
    */
    'items'?: IListItem[];
  }

  interface GenesysToggle {
    /**
    * Indicate if the toggle is checked or not
    */
    'checked': boolean;
    /**
    * Indicate the checked label
    */
    'checkedLabel': string;
    /**
    * Indicate if the toggle is disabled or not
    */
    'disabled': boolean;
    /**
    * Indicate the unchecked label
    */
    'uncheckedLabel': string;
  }
  interface GenesysToggleAttributes extends StencilHTMLAttributes {
    /**
    * Indicate if the toggle is checked or not
    */
    'checked'?: boolean;
    /**
    * Indicate the checked label
    */
    'checkedLabel'?: string;
    /**
    * Indicate if the toggle is disabled or not
    */
    'disabled'?: boolean;
    /**
    * Triggered when the state of the component changed.
    */
    'onCheck'?: (event: CustomEvent) => void;
    /**
    * Indicate the unchecked label
    */
    'uncheckedLabel'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'GenesysActionButton': Components.GenesysActionButton;
    'GenesysButton': Components.GenesysButton;
    'GenesysList': Components.GenesysList;
    'GenesysToggle': Components.GenesysToggle;
  }

  interface StencilIntrinsicElements {
    'genesys-action-button': Components.GenesysActionButtonAttributes;
    'genesys-button': Components.GenesysButtonAttributes;
    'genesys-list': Components.GenesysListAttributes;
    'genesys-toggle': Components.GenesysToggleAttributes;
  }


  interface HTMLGenesysActionButtonElement extends Components.GenesysActionButton, HTMLStencilElement {}
  var HTMLGenesysActionButtonElement: {
    prototype: HTMLGenesysActionButtonElement;
    new (): HTMLGenesysActionButtonElement;
  };

  interface HTMLGenesysButtonElement extends Components.GenesysButton, HTMLStencilElement {}
  var HTMLGenesysButtonElement: {
    prototype: HTMLGenesysButtonElement;
    new (): HTMLGenesysButtonElement;
  };

  interface HTMLGenesysListElement extends Components.GenesysList, HTMLStencilElement {}
  var HTMLGenesysListElement: {
    prototype: HTMLGenesysListElement;
    new (): HTMLGenesysListElement;
  };

  interface HTMLGenesysToggleElement extends Components.GenesysToggle, HTMLStencilElement {}
  var HTMLGenesysToggleElement: {
    prototype: HTMLGenesysToggleElement;
    new (): HTMLGenesysToggleElement;
  };

  interface HTMLElementTagNameMap {
    'genesys-action-button': HTMLGenesysActionButtonElement
    'genesys-button': HTMLGenesysButtonElement
    'genesys-list': HTMLGenesysListElement
    'genesys-toggle': HTMLGenesysToggleElement
  }

  interface ElementTagNameMap {
    'genesys-action-button': HTMLGenesysActionButtonElement;
    'genesys-button': HTMLGenesysButtonElement;
    'genesys-list': HTMLGenesysListElement;
    'genesys-toggle': HTMLGenesysToggleElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
