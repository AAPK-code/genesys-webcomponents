/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface GenesysButton {
    /**
    * The component accent (secondary or primary).
    */
    'accent': string;
    /**
    * Indicate if the button is disabled or not
    */
    'disabled': boolean;
    /**
    * The component left icon.
    */
    'leftIcon': string;
    /**
    * The component right icon.
    */
    'rightIcon': string;
    /**
    * The component text.
    */
    'text': string;
  }
  interface GenesysButtonAttributes extends StencilHTMLAttributes {
    /**
    * The component accent (secondary or primary).
    */
    'accent'?: string;
    /**
    * Indicate if the button is disabled or not
    */
    'disabled'?: boolean;
    /**
    * The component left icon.
    */
    'leftIcon'?: string;
    /**
    * The component right icon.
    */
    'rightIcon'?: string;
    /**
    * The component text.
    */
    'text'?: string;
  }

  interface GenesysToggle {
    /**
    * Indicate if the toggle is checked or not
    */
    'checked': boolean;
    /**
    * Indicate the checked label
    */
    'checkedLabel': string;
    /**
    * Indicate if the toggle is disabled or not
    */
    'disabled': boolean;
    /**
    * Indicate the unchecked label
    */
    'uncheckedLabel': string;
  }
  interface GenesysToggleAttributes extends StencilHTMLAttributes {
    /**
    * Indicate if the toggle is checked or not
    */
    'checked'?: boolean;
    /**
    * Indicate the checked label
    */
    'checkedLabel'?: string;
    /**
    * Indicate if the toggle is disabled or not
    */
    'disabled'?: boolean;
    /**
    * Triggered when the state of the component changed.
    */
    'onCheck'?: (event: CustomEvent) => void;
    /**
    * Indicate the unchecked label
    */
    'uncheckedLabel'?: string;
  }
  interface GenesysRating {
    /**
    * Determines if half ratings are allowed
    */
    'allowHalfRatings': boolean;
    /**
    * Determines if the user can set a rating
    */
    'disabled': boolean;
    /**
    * The labels for each stars
    */
    'labels': string[];
    /**
    * The maximum rating possible
    */
    'maxRating': number;
    /**
    * The rating
    */
    'rating': number;
    /**
    * The polygon points to create the svg. By default this is a star!
    */
    'svgPoints': string;
    /**
    * The view box for the SVG
    */
    'svgViewBox': string;
  }
  interface GenesysRatingAttributes extends StencilHTMLAttributes {
    /**
    * Determines if half ratings are allowed
    */
    'allowHalfRatings'?: boolean;
    /**
    * Determines if the user can set a rating
    */
    'disabled'?: boolean;
    /**
    * The labels for each stars
    */
    'labels'?: string[];
    /**
    * The maximum rating possible
    */
    'maxRating'?: number;
    /**
    * Triggered when the value changed
    */
    'onUpdate'?: (event: CustomEvent) => void;
    /**
    * The rating
    */
    'rating'?: number;
    /**
    * The polygon points to create the svg. By default this is a star!
    */
    'svgPoints'?: string;
    /**
    * The view box for the SVG
    */
    'svgViewBox'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'GenesysButton': Components.GenesysButton;
    'GenesysToggle': Components.GenesysToggle;
  }

  interface StencilIntrinsicElements {
    'genesys-button': Components.GenesysButtonAttributes;
    'genesys-toggle': Components.GenesysToggleAttributes;
  }


  interface HTMLGenesysButtonElement extends Components.GenesysButton, HTMLStencilElement {}
  var HTMLGenesysButtonElement: {
    prototype: HTMLGenesysButtonElement;
    new (): HTMLGenesysButtonElement;
  };

  interface HTMLGenesysToggleElement extends Components.GenesysToggle, HTMLStencilElement {}
  var HTMLGenesysToggleElement: {
    prototype: HTMLGenesysToggleElement;
    new (): HTMLGenesysToggleElement;
  };

  interface HTMLElementTagNameMap {
    'genesys-button': HTMLGenesysButtonElement
    'genesys-toggle': HTMLGenesysToggleElement
  }

  interface ElementTagNameMap {
    'genesys-button': HTMLGenesysButtonElement;
    'genesys-toggle': HTMLGenesysToggleElement;
    'GenesysRating': Components.GenesysRating;
  }

  interface StencilIntrinsicElements {
    'genesys-rating': Components.GenesysRatingAttributes;
  }


  interface HTMLGenesysRatingElement extends Components.GenesysRating, HTMLStencilElement {}
  var HTMLGenesysRatingElement: {
    prototype: HTMLGenesysRatingElement;
    new (): HTMLGenesysRatingElement;
  };

  interface HTMLElementTagNameMap {
    'genesys-rating': HTMLGenesysRatingElement
  }

  interface ElementTagNameMap {
    'genesys-rating': HTMLGenesysRatingElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
