/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface GenesysButton {
    /**
    * The component accent (secondary or primary).
    */
    'accent': string;
    /**
    * Indicate if the button is disabled or not
    */
    'disabled': boolean;
    /**
    * The component left icon.
    */
    'leftIcon': string;
    /**
    * The component right icon.
    */
    'rightIcon': string;
    /**
    * The component text.
    */
    'text': string;
  }
  interface GenesysButtonAttributes extends StencilHTMLAttributes {
    /**
    * The component accent (secondary or primary).
    */
    'accent'?: string;
    /**
    * Indicate if the button is disabled or not
    */
    'disabled'?: boolean;
    /**
    * The component left icon.
    */
    'leftIcon'?: string;
    /**
    * The component right icon.
    */
    'rightIcon'?: string;
    /**
    * The component text.
    */
    'text'?: string;
  }

  interface GenesysRating {
    /**
    * Determines if half ratings are allowed
    */
    'allowHalfRatings': boolean;
    /**
    * Determines if the user can set a rating
    */
    'disabled': boolean;
    /**
    * The labels for each stars
    */
    'labels': string[];
    /**
    * The maximum rating possible
    */
    'maxRating': number;
    /**
    * The rating
    */
    'rating': number;
    /**
    * The polygon points to create the svg. By default this is a star!
    */
    'svgPoints': string;
    /**
    * The view box for the SVG
    */
    'svgViewBox': string;
  }
  interface GenesysRatingAttributes extends StencilHTMLAttributes {
    /**
    * Determines if half ratings are allowed
    */
    'allowHalfRatings'?: boolean;
    /**
    * Determines if the user can set a rating
    */
    'disabled'?: boolean;
    /**
    * The labels for each stars
    */
    'labels'?: string[];
    /**
    * The maximum rating possible
    */
    'maxRating'?: number;
    /**
    * Triggered when the value changed
    */
    'onUpdate'?: (event: CustomEvent) => void;
    /**
    * The rating
    */
    'rating'?: number;
    /**
    * The polygon points to create the svg. By default this is a star!
    */
    'svgPoints'?: string;
    /**
    * The view box for the SVG
    */
    'svgViewBox'?: string;
  }

  interface GenesysTextField {
    /**
    * Clears the input.
    */
    'clear': () => void;
    /**
    * Timeout between input and validation.
    */
    'debounceTimeout': number;
    /**
    * Disable the input and prevent interactions.
    */
    'disabled': boolean;
    /**
    * The input placeholder.
    */
    'placeholder': string;
    /**
    * Set the input as required.
    */
    'required': boolean;
    /**
    * The input type.
    */
    'type': string;
    /**
    * Shows/Hides the update indicator.
    */
    'updateIndicator': boolean;
    /**
    * The input validation.
    */
    'validation': any | `(newValue: string) => boolean` | RegExp;
    /**
    * The message displayed on validation failure.
    */
    'validationMessage': string;
    /**
    * Indicate the input value
    */
    'value': string;
  }
  interface GenesysTextFieldAttributes extends StencilHTMLAttributes {
    /**
    * Timeout between input and validation.
    */
    'debounceTimeout'?: number;
    /**
    * Disable the input and prevent interactions.
    */
    'disabled'?: boolean;
    /**
    * Triggered when user inputs.
    */
    'onInput'?: (event: CustomEvent) => void;
    /**
    * The input placeholder.
    */
    'placeholder'?: string;
    /**
    * Set the input as required.
    */
    'required'?: boolean;
    /**
    * The input type.
    */
    'type'?: string;
    /**
    * Shows/Hides the update indicator.
    */
    'updateIndicator'?: boolean;
    /**
    * The input validation.
    */
    'validation'?: any | `(newValue: string) => boolean` | RegExp;
    /**
    * The message displayed on validation failure.
    */
    'validationMessage'?: string;
    /**
    * Indicate the input value
    */
    'value'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'GenesysButton': Components.GenesysButton;
    'GenesysRating': Components.GenesysRating;
    'GenesysTextField': Components.GenesysTextField;
  }

  interface StencilIntrinsicElements {
    'genesys-button': Components.GenesysButtonAttributes;
    'genesys-rating': Components.GenesysRatingAttributes;
    'genesys-text-field': Components.GenesysTextFieldAttributes;
  }


  interface HTMLGenesysButtonElement extends Components.GenesysButton, HTMLStencilElement {}
  var HTMLGenesysButtonElement: {
    prototype: HTMLGenesysButtonElement;
    new (): HTMLGenesysButtonElement;
  };

  interface HTMLGenesysRatingElement extends Components.GenesysRating, HTMLStencilElement {}
  var HTMLGenesysRatingElement: {
    prototype: HTMLGenesysRatingElement;
    new (): HTMLGenesysRatingElement;
  };

  interface HTMLGenesysTextFieldElement extends Components.GenesysTextField, HTMLStencilElement {}
  var HTMLGenesysTextFieldElement: {
    prototype: HTMLGenesysTextFieldElement;
    new (): HTMLGenesysTextFieldElement;
  };

  interface HTMLElementTagNameMap {
    'genesys-button': HTMLGenesysButtonElement
    'genesys-rating': HTMLGenesysRatingElement
    'genesys-text-field': HTMLGenesysTextFieldElement
  }

  interface ElementTagNameMap {
    'genesys-button': HTMLGenesysButtonElement;
    'genesys-rating': HTMLGenesysRatingElement;
    'genesys-text-field': HTMLGenesysTextFieldElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
